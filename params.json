{"name":"node-webrtc","tagline":"WebRTC stack for node.js","body":"[![NPM](https://nodei.co/npm/wrtc.png?downloads=true&stars=true)](https://nodei.co/npm/wrtc/)\r\n\r\n[![Build Status](https://secure.travis-ci.org/js-platform/node-webrtc.png?branch=develop)](http://travis-ci.org/js-platform/node-webrtc) [![Gratipay][wrtc-gratipay-image]][wrtc-gratipay-url]\r\n\r\n# Contributing\r\n\r\nThe best way to get started is to read through the `Getting Started` and `Example` sections before having a look through the open [issues](https://github.com/modeswitch/node-webrtc/issues). Some of the issues are marked as `good first bug`, but feel free to contribute to any of the issues there, or open a new one if the thing you want to work on isn't there yet.\r\n\r\nOnce you've done some hacking and you'd like to have your work merged, you'll need to make a pull request. If your patch includes code, make sure to check that all the unit tests pass, including any new tests you wrote. Finally, make sure you add yourself to the `AUTHORS` file.\r\n\r\n# Getting Started\r\n\r\n## Prerequisites\r\n\r\n* python2\r\n* git\r\n* pkg-config\r\n* libncurses-devel\r\n* libssl-devel\r\n* libnss-devel\r\n* libexpat-devel\r\n\r\n### Debian/Ubuntu\r\n\r\nTo install prerequisites with the apt-get package manager,\r\n\r\n`apt-get install python2.7 git-all pkg-config libncurses5-dev libssl-dev libnss3-dev libexpat-dev  `\r\n\r\n### CentOS/Fedora/RHEL\r\n\r\nTo install prerequisites with the yum package manager,\r\n\r\n`yum install python git pkgconfig openssl-devel ncurses-devel nss-devel expat-devel`\r\n\r\n### OSX\r\n\r\n* XCode\r\n\r\nTo install prerequisites using the homebrew package manager,\r\n\r\n```\r\nbrew update\r\nbrew install git openssl pkg-config openssl ncurses nss expat\r\n```\r\n\r\nSome of these libraries may be installed by default. Package names for these libraries may differ between distributions.\r\n\r\n## Install\r\n\r\nThe easiest way to install is via npm:\r\n\r\n````\r\nnpm install wrtc\r\n````\r\n\r\nIf you want to work from source:\r\n\r\n````\r\ngit clone https://github.com/js-platform/node-webrtc.git\r\ncd node-webrtc\r\nnpm install\r\n````\r\n\r\n## Troubleshooting\r\n\r\n### Error while loading libtinfo.so.5 on Linux\r\n\r\nAdd a symlink to libncurses:\r\n\r\n        sudo ln -s /usr/lib/libncurses.so.5 /usr/lib/libtinfo.so.5\r\n\r\n### Some linux distros default to Python3 and the build process fails\r\n\r\nThis is most common on Arch Linux. Set `python2` as the default for `npm`:\r\n\r\n        npm config set python python2\r\n\r\n### The node.js package for my distro is too old\r\n\r\nFollow the instructions here: https://github.com/joyent/node/wiki/installing-node.js-via-package-manager\r\n\r\n# Tests\r\n\r\n## Unit tests\r\n\r\nOnce everything is built, try `npm test` as a sanity check.\r\n\r\n## bridge.js\r\nYou can run the data channel demo by `node examples/bridge.js` and browsing to `examples/peer.html` in `chrome --enable-data-channels`.\r\n\r\nusage:\r\n````\r\nnode examples/bridge.js [-h <host>] [-p <port>] [-ws <ws port>]\r\n````\r\noptions:\r\n````\r\n-h  host IP for the webserver that will serve the static files (default 127.0.0.1)\r\n-p  host port for the webserver that will serve the static files (default 8080)\r\n-ws port of the Web Socket server (default 9001)\r\n````\r\n\r\nIf the bridge and peer are on different machines, you can pass the bridge address to the peer by:\r\n````\r\nhttp://<webserver>/peer.html?<sockertserver:port>\r\n````\r\nBy default the bridge will be the same IP as the webserver and will listen on port 9001.\r\n\r\n## ping-pong-test.js\r\n\r\nThe ping-pong example creates two peer connections and sends some data between them.\r\n\r\nusage:\r\n````\r\nnode examples/ping-pong-test.js\r\n````\r\n\r\n[wrtc-gratipay-image]: https://img.shields.io/gratipay/modeswitch.svg?style=flat\r\n[wrtc-gratipay-url]: https://gratipay.com/modeswitch/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}